// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
   id String @id @default(auto()) @map("_id") @db.ObjectId
   username String
   email String @unique
   hashedPassword String
   receiveNewsletters Boolean @default(false)
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt

   // Relationships
   adminId String? @map("_admin") @db.ObjectId
   admin Admin? @relation("AdminUsers", fields: [adminId], references: [id])
   comments Comment[] @relation("UserComments")
   donations Donation[] @relation("UserDonations")
   favoritesArray Favorite[] @relation("UserFavorites")
}

model Novel {
   id String @id @default(auto()) @map("_id") @db.ObjectId
   title String
   description String
   author String
   preview String
   content String
   createdAt DateTime @default(now())
   updatedAt DateTime @updatedAt
   genre String?
   coverImage String?

   // Relationships
   comments Comment[] @relation("NovelComments")
   favoritedByArray Favorite[] @relation("NovelFavorites")
}

model Favorite {
   id String @id @default(auto()) @map("_id") @db.ObjectId
   createdAt DateTime @default(now())

   // Relationships
   userId String? @map("_user") @db.ObjectId
   user User? @relation("UserFavorites", fields: [userId], references: [id])
   novelId String? @map("_novel") @db.ObjectId
   novel Novel? @relation("NovelFavorites", fields: [novelId], references: [id])
}

model Comment {
   id String   @id @default(auto()) @map("_id") @db.ObjectId
   content String
   createdAt DateTime @default(now())

   // Relationships
   userId String? @map("_user") @db.ObjectId
   user User? @relation("UserComments", fields: [userId], references: [id])
   novelId String? @map("_novel") @db.ObjectId
   novel Novel? @relation("NovelComments", fields: [novelId], references: [id])
   parentCommentId String? @map("_parentComment") @db.ObjectId
   parentComment Comment? @relation("Replies", fields: [parentCommentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
   replies Comment[] @relation("Replies")
}

model Admin {
   id String @id @default(auto()) @map("_id") @db.ObjectId
   status String
   authorName String
   picture String
   biography String
   favoriteBooks String[]
   createdAt DateTime @default(now())

   // Relationships
   users User[] @relation("AdminUsers")
   sentNewsletters Newsletter[] @relation("AdminNewsletters")
}

model Newsletter {
   id String @id @default(auto()) @map("_id") @db.ObjectId
   title String
   content String
   createdAt DateTime @default(now())

   // Relationships
   adminId String? @map("_admin") @db.ObjectId
   admin Admin? @relation("AdminNewsletters", fields: [adminId], references: [id])
}

model Donation {
   id String @id @default(auto()) @map("_id") @db.ObjectId
   amount Float
   donator String?
   message String?
   createdAt DateTime @default(now())

   // Relationships
   userId String? @map("_user") @db.ObjectId
   user User? @relation("UserDonations", fields: [userId], references: [id])
}